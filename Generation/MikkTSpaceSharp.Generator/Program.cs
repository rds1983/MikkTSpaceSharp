using Hebron.Roslyn;
using Microsoft.CodeAnalysis;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;

namespace StbSharp.StbImage.Generator
{
	class Program
	{
		private class Writer
		{
			private readonly StringBuilder sb = new StringBuilder();

			public Writer()
			{
				sb.AppendLine(string.Format("// Generated by Hebron at {0}", DateTime.Now));
				sb.AppendLine();

				sb.AppendLine("using System;");
				sb.AppendLine("using System.Runtime.InteropServices;");
				sb.AppendLine("using Hebron.Runtime;");

				sb.AppendLine();

				sb.Append("namespace MikkTSpaceSharp\n{\n\t");
				sb.AppendLine("unsafe partial class MikkTSpace\n\t{");
			}

			public void Write<T>(Dictionary<string, T> input, Func<string, string, string> beforeWrite = null) where T : SyntaxNode
			{
				var keys = (from string k in input.Keys select k).ToArray();
				foreach (var key in keys)
				{
					string data;
					using (var sw = new StringWriter())
					{
						var s = input[key].NormalizeWhitespace();
						s.WriteTo(sw);

						data = sw.ToString();
					}

					if (beforeWrite != null)
					{
						data = beforeWrite(key, data);
					}

					sb.AppendLine(data);
					sb.AppendLine();
				}
			}

			public void WriteEmptyLine()
			{
				sb.AppendLine();
			}

			public string Finish()
			{
				sb.Append("}\n}");
				return sb.ToString();
			}
		}

		private static string UpdatePEdges(string data)
		{
			var regex = new Regex(@"pEdges\[([^\]]*)\]\.(\w+)");

			return regex.Replace(data, "pEdges[$1].i.$2");
		}

		static void Process()
		{
			var parameters = new RoslynConversionParameters
			{
				InputPath = @"mikktspace.c",
				Defines = new string[]
				{
				},
				SkipStructs = new string[]
				{
					"SEdge"
				},
				SkipGlobalVariables = new string[]
				{
				},
				SkipFunctions = new string[]
				{
				},
				Classes = new string[]
				{
				},
			};

			var result = RoslynCodeConverter.Convert(parameters);

			// Write output
			var writer = new Writer();
			writer.Write(result.GlobalVariables);

//			File.WriteAllText(@"..\..\..\..\..\..\Source\MikkTSpace.GlobalVariables.Generated.cs", writer.Finish());

			writer = new Writer();
			writer.Write(result.Structs);
			//File.WriteAllText(@"..\..\..\..\..\..\Source\MikkTSpace.Structs.Generated.cs", writer.Finish());

			writer = new Writer();
			writer.Write(result.Delegates);
			writer.WriteEmptyLine();
			writer.Write(result.Functions);

			var data = writer.Finish();

			data = data.Replace("STriInfo pTriInfos", "STriInfo[] pTriInfos");
			data = data.Replace("STriInfo psTriInfos", "STriInfo[] psTriInfos");

			data = data.Replace("(STriInfo)(CRuntime.malloc((ulong)(sizeof(STriInfo) * iNrTrianglesIn)));", "new STriInfo[iNrTrianglesIn];");

			data = data.Replace("(int)((pTriInfos[f].iFlag & 8) != 0)", "((pTriInfos[f].iFlag & 8) != 0)?1:0");

			data = data.Replace("!((__builtin_fpclassify((int)(2), (int)(1), (int)(-1), (int)(-2), (int)(0), (float)(fSep))) <= (0))",
				"!float.IsFinite(fSep)");

			data = UpdatePEdges(data);

			File.WriteAllText(@"..\..\..\..\..\..\Source\MikkTSpace.Functions.Generated.cs", data);
		}

		static void Main(string[] args)
		{
			try
			{
				Process();
			}
			catch (Exception ex)
			{
				Console.WriteLine(ex.Message);
				Console.WriteLine(ex.StackTrace);
			}

			Console.WriteLine("Finished. Press any key to quit.");
			Console.ReadKey();
		}
	}
}